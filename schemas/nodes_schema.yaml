type: map
mapping:
  regex;(.+):   # Any string as a node name
    type: map
    nullable: false
    mapping:
      listen_address: {type: str, nullable: false, range: {min: 1}}
      listen_port: {type: int, range: {min: 1025, max: 65535}, nullable: false}
      public_ip: {type: str, nullable: false, range: {min: 1}}
      use_upnp: {type: bool, nullable: false}
      autoupdate: {type: bool, nullable: false}
      slow_system: {type: bool, nullable: false}
      nodestats: {type: bool, nullable: false}
      restrict_commands: {type: bool, nullable: false}
      restrict_owner: {type: bool, nullable: false}
      cluster:
        type: map
        nullable: false
        mapping:
          preferred_master: {type: bool, nullable: false}
          no_master: {type: bool, nullable: false}
          heartbeat: {type: int, range: {min: 10}, nullable: false}
          cloud_drive: {type: bool, nullable: false}
      database:
        type: map
        nullable: false
        mapping:
          url: {type: str, required: true, nullable: false, range: {min: 1}}
          pool_min: {type: int, range: {min: 2}, nullable: false}
          pool_max: {type: int, range: {min: 5}, nullable: false}
          max_idle: {type: int, nullable: false}
      DCS:
        type: map
        nullable: false
        mapping:
          installation: {type: str, required: true, nullable: false, range: {min: 1}, func: dir_exists}
          autoupdate: {type: bool, nullable: false}
          announce:
            type: map
            nullable: false
            mapping:
              channel: { type: int, required: true, nullable: false }
              title: { type: str, nullable: false, range: { min: 1 } }
              description: { type: str, nullable: false, range: { min: 1 } }
              footer: { type: str, nullable: false, range: { min: 1 } }
              mention:
                type: seq
                nullable: false
                sequence:
                  - { type: text, nullable: false }
          update_window:
            type: map
            nullable: false
            mapping:
              timezone: { type: str, nullable: false, range: { min: 1 } }
              regex;(^(0?[0-9]|1[0-9]|2[0-4])(:[0-5][0-9])?-(0?[0-9]|1[0-9]|2[0-4])(:?[0-5][0-9])?$): { type: str, pattern: '^[YNP]{7}$', nullable: false }
          desanitize: {type: bool, nullable: false}
          minimized: {type: bool, nullable: false}
          user: {type: str, nullable: false, range: {min: 1}}
          password: {type: str, nullable: false, range: {min: 1}}
          allow_unsafe_api:
            type: seq
            nullable: false
            sequence:
              - {type: str, nullable: false, unique: true, enum: ['scripting', 'gui', 'userhooks']}
          allow_dostring_in:
            type: seq
            nullable: false
            sequence:
              - {type: str, nullable: false, unique: true, enum: ['server', 'scripting', 'config', 'mission', 'gui', 'export']}
      extensions:
        include: 'node_extensions_schema'
      instances:
        type: map
        func: is_node
        nullable: false
        mapping:
          regex;(.+):   # Any string as an instance name
            type: map
            nullable: false
            mapping:
              home: {type: str, nullable: false, range: {min: 1}, func: dir_exists}
              missions_dir: {type: str, nullable: false, range: {min: 1}, func: dir_exists}
              mission_rewrite: {type: bool, nullable: false}
              autoscan: {type: bool, nullable: false}
              bot_port: {type: int, required: true, nullable: false, func: unique_port}
              webgui_port: {type: int, nullable: false, func: unique_port}
              dcs_port: {type: int, nullable: false, func: unique_port}
              server_user: {type: str, nullable: false, range: {min: 1}}
              max_hung_minutes: {type: int, range: {min: 0}, nullable: false}
              affinity: {type: any, nullable: false, func: int_csv_or_list}
              priority: {type: str, enum: ['below_normal', 'normal', 'above_normal', 'high', 'realtime'], nullable: false}
              extensions:
                include: 'instance_extensions_schema'
